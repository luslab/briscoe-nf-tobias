includeConfig 'luslab-nf-modules/configs/luslab-base.config'

params {
    verbose = false
    bd_hmem = false
    bd_cpus = 32
    bd_memory = 128.GB
    bd_time = 72.h

    // Module params
    modules{
      'motifsplit_awk' {
            args             = "\'/^>/{x=\"motif_\"++i\".txt\"}{print > x;}\'"
            outfile_name     = "*.txt"
            write_to_output  = false
            publish_dir      = "_"
            publish_results  = "none"
        }
        'cust_samtools_faidx' {
            args             = ""
            publish_dir      = "_"
            publish_results  = "none"
        }
        'tobias_atacorrect' {
            publish_dir      = "tobias_atacorrect"
            publish_results  = "all"
        }
        'tobias_footprint' {
            publish_dir      = "tobias_footprint"
            publish_results  = "all"
        }
        'tobias_bindetect' {
            publish_dir      = "tobias_bindetect"
            publish_results  = "all"
        }
        'tobias_plotaggregate' {
            publish_dir      = "tobias_plotaggregate"
            publish_results  = "all"
        }
    }

    // Pipline defaults
    genome_index = ''
    skip_bam_index = false
    skip_genome_index = false
    motif_bundle_count = 4
}

manifest {
    name = 'TOBIAS-pipeline'
    author = 'Luscombe-Briscoe Labs'
    homePage = 'pipeline-homepage'
    description = 'pipeline-description'
    nextflowVersion = '>=20.07.1'
    version = '0.5'
}

profiles {
  test { includeConfig 'configs/test.config' }
  crick_tobias { includeConfig 'configs/crick-tobias.config' }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}