includeConfig 'luslab-nf-modules/configs/luslab-base.config'
params {
    verbose = true
}

manifest {
    name = 'TOBIAS-pipeline'
    author = 'Luscombe-Briscoe Labs'
    homePage = 'pipeline-homepage'
    description = 'pipeline-description'
    nextflowVersion = '>=20.01.0'
    version = '0.1'
}

process {
  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }
  
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
  
  // Place process specific resource strategies here
  withName: tobias_atacorrect {
    time = { check_max( 4.h * task.attempt, 'time' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 8 , 'cpus' ) }
    maxRetries = 2
  }

  withName: tobias_footprint {
    time = { check_max( 4.h * task.attempt, 'time' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 16 , 'cpus' ) }
    maxRetries = 2
  }

  withName: tobias_bindetect {
    time = { check_max( 24.h * task.attempt, 'time' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 16 , 'cpus' ) }
    maxRetries = 2
  }

  withName: tobias_plotaggregate {
    time = { check_max( 4.h * task.attempt, 'time' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 6 , 'cpus' ) }
    maxRetries = 2
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}